{"name":"Express-boilerplate","tagline":"Express boilerplate using MVC pattern and ES2015","body":"Express boilerplate\r\n================\r\n\r\nI like Ruby On Rails and his structure so I decided to follow their MVC conventions with the node module expressjs. I'm also inspired\r\nwith the Ember.js framework that I like too.\r\n\r\n\r\n## Install\r\n\r\nAll the code is written with ES2015 syntax, you need the Node v4 version.\r\n\r\n\r\n- Clone the repo\r\n- `npm i`\r\n- `npm start` -> Will start a nodemon instance for your server\r\n\r\n## ES2015\r\n\r\nThis boilerplate use ES2015 syntax with Node.js 4.0, you can check out the [feature available here](https://nodejs.org/en/docs/es6/)\r\n\r\n## rootRequire\r\n\r\n**rootRequire** is a global function designed to avoid some excessive path in your application and avoid NODE_PATH configuration (specialy for Windows users).\r\nInstead of calling require, just call rootRequire and the path of your module. **Remember**, the path always start from the top of your application :\r\n\r\n```js\r\nlet Book = rootRequire('app/models/Book');\r\n```\r\n\r\n## Structure\r\n\r\nMVC pattern is cool and simple to understand, so it's based on him.\r\nFirst, you have an **app** folder who will contain all code of your application :\r\n\r\n**app/**\r\n- [controllers](#controller)\r\n- [models](#models)\r\n- [views](#views)\r\n- [routes](#routes)\r\n- <a href=\"#routerjs\">Router.js</a>\r\n\r\n**assets/**\r\n\r\n**config/**\r\n### Controller\r\n\r\nA controller is design to handle the logic of your application, so he will handle the request and send the response. You should create **one controller per route**, so if you create a **/users** route the controller should be named **UsersController**. This pattern allow you to quickly find the file you want in your text editor.\r\n\r\nThe structure of a controller is simple, export an object of methods. Here is an example :\r\n```js\r\n// IndexController.js\r\n\r\nmodule.exports = {\r\n  index: {\r\n    get(req, res) {\r\n      res.locals.title = \"Home\";\r\n      res.render('index');\r\n    }\r\n  }\r\n};\r\n```\r\n\r\n### Models\r\n\r\nThis boilerplate use MySQL as default. The configuration file is called **mysql.js** and is located in the **config** folder. Here is the basic setup :\r\n```js\r\n'use strict';\r\n\r\nlet mysql = require('mysql');\r\n\r\nvar connection = mysql.createConnection({\r\n  host: 'localhost',\r\n  database: 'test',\r\n  user: 'root',\r\n  password: ''\r\n});\r\n\r\nconnection.connect(function (err) {\r\n  if (err) {\r\n    console.error('error connecting: ' + err.stack);\r\n    return;\r\n  }\r\n});\r\n\r\nmodule.exports = connection;\r\n```\r\n\r\nDon't forget to use the correct database and login/password ! You can now create a model based on the route or something you want like **Book.js**. Each model should be a JavaScript class subclassing the ORM.js model. The ORM contains the basics queries needed in a model.\r\nThis file will use a function utility called **query**. Here is an example :\r\n\r\n```js\r\n'use strict';\r\n\r\n// ORM.js\r\nlet query = rootRequire('utils/query');\r\n\r\nclass ORM {\r\n  constructor(table) {\r\n    this.table = table;\r\n  }\r\n\r\n  static use(table) {\r\n    this.table = table;\r\n  }\r\n\r\n  static findAll() {\r\n    return query(`SELECT * FROM ${this.table}`);\r\n  }\r\n\r\n  static findById(id) {\r\n    return query(`SELECT * FROM ${this.table} WHERE id = ?`, [id]);\r\n  }\r\n\r\n  static remove(id) {\r\n    return query(`DELETE FROM ${this.table} WHERE id = ?`, [id]);\r\n  }\r\n\r\n  save(obj) {\r\n    return query(`INSERT INTO ${this.table} SET ?`, [obj]);\r\n  }\r\n}\r\n\r\nmodule.exports = ORM;\r\n```\r\n\r\nquery is designed for simplifying the model and **use Promise** !\r\nNotice the **use** static method, she is designed to set the table to use for your model, obviously, you need to call her before the subclasssing :\r\n\r\n```js\r\n'use strict';\r\n// Book.js\r\nlet ORM = rootRequire('utils/ORM');\r\n\r\nclass Book extends ORM {\r\n\r\n  constructor(opt) {\r\n    super('books');\r\n    this.title = opt.title;\r\n\r\n    return this;\r\n  }\r\n\r\n  get book() {\r\n    return {\r\n      title: this.title\r\n    }\r\n  }\r\n\r\n  save() {\r\n    return super.save(this.book);\r\n  }\r\n}\r\n\r\nmodule.exports = new Book();\r\n```\r\nThe class contructor return **this** for chaining and for example use the save method.\r\nSo when you call the method in your controller, you have to use the **then** and **catch** functions :\r\n```js\r\n'use strict';\r\n// BooksController.js\r\nlet Book = require('app/models/Book');\r\n\r\nmodule.exports = {\r\n  index: {\r\n    get(req, res) {\r\n\r\n      Book.findAll()\r\n        .then(books => {\r\n          res.locals.title = \"Home\";\r\n          res.locals.books = books;\r\n          res.render('index');\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n        });\r\n\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nEasy to read and understand isn't it ?\r\n\r\n### Views\r\n\r\nThis boilerplate use **Jade** for templating, if you prefer ejs, you just need to edit the `middleware.js` file in the config folder.\r\n\r\nAs I said for controller and routes, it's almost the same for the views. You should create a folder based on your routes (ex: users), create a\r\n**users** folder who will contain all the view concerned by the user.\r\n\r\n### Routes\r\n\r\nThe routes files are used for making the relation between your controller and the URLs. Here is an example :\r\n```js\r\n'use strict';\r\n// IndexRoute.js\r\n\r\n/**\r\n* Home Route\r\n* path: /\r\n******************** */\r\n\r\nlet express    = require('express');\r\nlet Controller = rootRequire('app/controllers/IndexController');\r\nlet router     = express.Router();\r\n\r\n\r\nrouter.get('/', Controller.index.get);\r\n\r\nmodule.exports = router;\r\n```\r\n\r\nAs you can see, I put a function according the HTTP verb like here **index.get** for the GET on `/`.\r\n\r\n### Router.js\r\n\r\nThe **Router.js** may intrigue you, it serves to handle all of your routes. Here is an example :\r\n```js\r\n// Router.js\r\n\r\nmodule.exports = [\r\n  {\r\n    path: '/',\r\n    handler: rootRequire('app/routes/IndexRoute'),\r\n  },\r\n  {\r\n    path: '/books',\r\n    handler: rootRequire('app/routes/BooksRoute'),\r\n  },\r\n];\r\n\r\n```\r\n\r\n## Assets\r\n\r\nThis boilerplate set the **assets** folder for all of your static files. Some folders are already available :\r\n\r\n- stylesheets\r\n- javascripts\r\n- images\r\n- fonts\r\n\r\nIn your views, the links will look like this : `/stylesheets/style.css` or `/images/logo.png`.\r\n\r\n## Config\r\n\r\nThe folder **config** is design to keep all config files like middleware, mysql config, etc..\r\nThe idea of this folder is to separate the logic of the configuration. With MySQL as example, you just have to create the connection and export the object for making queries.\r\n\r\n## Testing\r\n\r\nThis boilerplate use [Mocha](https://mochajs.org) and [superagent](https://github.com/visionmedia/superagent) for testing\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}